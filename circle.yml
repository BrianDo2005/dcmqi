machine:
  # XXX: btrfs circleCI fix, see: https://github.com/docker/docker/issues/9939 and https://github.com/Sabayon/docker-stage3-base-amd64/commit/8c1bf737113a278dd2f
  pre:
    - sudo curl -L -o /usr/bin/docker 'https://s3-external-1.amazonaws.com/circle-downloads/docker-1.9.0-circleci'
    - sudo chmod 0755 /usr/bin/docker
  services:
    - docker
  python:
    version: 2.7.11
  environment:
    CFLAGS: "-g -O0 -fprofile-arcs -ftest-coverage"
    CXXFLAGS: "-g -O0 -fprofile-arcs -ftest-coverage"
    LDFLAGS: "-g -O0 -fprofile-arcs -ftest-coverage"
dependencies:
  cache_directories:
    - "~/dcmqi/build"
    - "~/.pyenv"

  post:

    #--------------------------------------------------------------------------
    # In CircleCI Linux environment: build, test, and submit coverage report
    #--------------------------------------------------------------------------
    # Install cmake
    - |
      sudo apt-get install lcov && \
      sudo apt-get remove cmake &&  \
      wget --no-check-certificate https://cmake.org/files/v3.6/cmake-3.6.0-rc4-Linux-x86_64.tar.gz && \
      tar zxf cmake-3.6.0-rc4-Linux-x86_64.tar.gz && \
      sudo cp -r cmake-3.6.0-rc4-Linux-x86_64/* /usr && \
      cmake --version
    # Build dcmqi
    - |
      mkdir -p codecov-build && \
      cd codecov-build && \
      ls -lat /usr/bin && \
      /usr/bin/cmake  .. && \
      make -j4
    # Test dcmqi
    - |
      cd codecov-build && \
      cd dcmqi-build && \
      ctest .
    # Generate and submit coverage report
    - |
      cd codecov-build && \
      cd dcmqi-build && \
      lcov --directory . --capture --output-file coverage.lcov && \
      lcov \
        --remove coverage.lcov \
          '/usr/*' \
          'ITK/*' \
          'DCMTK/*' \
          'SlicerExecutionModel/*' \
          'jsoncpp/*' \
          'dcmqi-build/*' \
          'codecov-build/*' \
        --output-file coverage_clean.lcov && \
      bash <(curl -s https://codecov.io/bash) -X gcov -C ${CIRCLE_SHA1} -f coverage_clean.lcov -R ../..

    #--------------------------------------------------------------------------
    # In docker image 'dockcross/manylinux-x64': Build, test and generate *.tar.gz package
    # Then build `qiicr/dcmqi:<version>` image based of 'centos:5' including content of generated package
    # Convert CTest results to Junit
    #--------------------------------------------------------------------------
    - cd docker && make dcmqi
    # Install package required by convert.py
    - pip install lxml==3.6.4
    - |
      cd docker && make dcmqi.test && \
      python ../util/junit/convert.py \
        ../build/dcmqi-build/ \
        ../util/junit/conv.xsl > ../build/BaseTest.xml
    # Install package required to automatically create or update GitHub releases (see below)
    - pip install -U "scikit-ci-addons>=0.18.0"

test:
  post:
    # Copy Junit results so that corresponding CircleCI report can be generated
    - mkdir -p ${CIRCLE_TEST_REPORTS}/junit
    - cp ~/dcmqi/build/BaseTest.xml ${CIRCLE_TEST_REPORTS}/junit

deployment:
  nightly: # just a label
    branch: master
    owner: QIICR
    commands:
      # Publish docker image `qiicr/dcmqi:<version>`
      - |
        [ "$DOCKER_EMAIL" != "" ] \
        && docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASS \
        && docker push qiicr/dcmqi:`git describe --tags --exact-match 2> /dev/null || echo "latest"` \
        || echo "skipping docker push"
      # Upload *.tar.gz package as GitHub pre-release
      - |
        ci_addons publish_github_release qiicr/dcmqi \
           --prerelease-packages "build/dcmqi-build/dcmqi-*-linux-*.tar.gz" \
           --prerelease-packages-clear-pattern "dcmqi-*-linux-*" \
           --prerelease-packages-keep-pattern "*<COMMIT_DATE>-<COMMIT_SHORT_SHA>*"

  release: # just a label
    tag: /v[0-9]+\.[0-9]+\.[0-9]+/
    owner: QIICR
    commands:
      # Remove pre-release tag to avoid confusing 'git describe'
      - git tag --delete latest | echo ""
      # Publish docker image `qiicr/dcmqi:<version>`
      - |
        [ "$DOCKER_EMAIL" != "" ] \
        && docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASS \
        && docker push qiicr/dcmqi:`git describe --tags --exact-match 2> /dev/null || echo "latest"` \
        || echo "skipping docker push"
      # Upload *.tar.gz package as GitHub release
      - |
        ci_addons publish_github_release qiicr/dcmqi \
           --release-packages "build/dcmqi-build/dcmqi-*-linux.tar.gz"
