@startuml

title ITK image -> DCM segmentation, DCM segmentation -> ITK image

package JSON <<Database>> {
}

package DICOM <<Database>> {
}

package ITK <<Database>> {
}

package dcmqi {

    note as dcmqiNote
      Two public functions:

      itkimage2dcmSegmentation(itkimage, seginfo, segments) : dcmdataset

      dcmSegmentation2itkimage()
    end note

    SegmentInformationJSONHandler --* SegmentAttributes : use
'    SegmentInformationJSONHandler -> Segmentation : creates
'    SegmentInformationJSONHandler -> Segmentation : reads
'    note as SegmentationNote
'        Here it would make sense to provide
'        as many default attributes as possible
'    end note
'
'    Segmentation .. SegmentationNote


dcmqi -> JSON : read/write
dcmqi -> DICOM: read/write
dcmqi -> ITK: read/write

    SegmentAttributes -*  Helpers : use
}

class Helpers {
    + {static} TokenizeString(string str, vector<string> &tokens, string delimiter): void
    + {static} SplitString(string str, string &head, string &tail, string delimiter): void
    + {static} FloatToStrScientific(float f): string
---
    + {static} StringToCodeSequenceMacro(std::string str): CodeSequenceMacro
    + {static} StringToDSRCodedEntryValue(std::string str): DSRCodedEntryValue
---
    + {static} getCIEXYZFromRGB(unsigned *rgb, float *cieXYZ): float*
    + {static} getRGBFromCIEXYZ(float* cieXYZ, unsigned *rgb): unsigned*
    + {static} getCIELabFromCIEXYZ(float *cieXYZ, float *cieLab): float*
    + {static} getCIEXYZFromCIELab(float *cieLab, float *cieXYZ): float*
    + {static} getIntegerScaledCIELabFromCIELab(float *cieLab, unsigned *cieLabScaled): unsigned*
    + {static} getCIELabFromIntegerScaledCIELab(unsigned* cieLabScaled, float* cieLab): float*
}

class SegmentInformationJSONHandler {
    + attributes : SegmentAttributes[]
    + SegmentInformationJSONHandler()
    + SegmentInformationJSONHandler(string inputFileName)
    + write(string filename) : bool
    - read() : bool
}
'
'class Segmentation {
'    + seriesNumber: int
'    + seriesDescription: string
'    + isValid(): bool
'}

class SegmentAttributes {
    - labelID : unsigned
    - attributesDictionary : map<string, string>
    + setLabelID(unsigned labelID) : void
    + lookupAttribute(string key) : string
    + populateAttributesFromString(string attributesStr) : int
    + PrintSelf() : void
}

@enduml